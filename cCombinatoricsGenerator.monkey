Import cCombinatorics
Import iCombinatoricsGenerator
Import iCombinatorCallback
Import tCombinatoricsExceptions

Class CombinatoricsGenerator<T> Implements ICombinatoricsGenerator<T> Abstract
	Protected
	#rem monkeydoc
		An empty object of type T which can be returned in place of Null
	#END
	Global NIL:T[]
	#rem monkeydoc
		Holds the elements this object was initialized with
	#END
	Field elements:T[]
	#rem monkeydoc
		The last value generated by NextValue()
	#END
	Field currentValue:T[]
	#rem monkeydoc
		An object containing code to be applied to each element retrieved
		via NextValue() before that element is returned.
	#END
	Field nextElementTransform:ICombinatorCallback<T>
	#rem monkeydoc
		This callback is applied to the entire result, not to the individual
		elements of a permutation or combination. In short, nextElementTransform
		runs as each element is selected, and is applied only to that element;
		nextValueTransform runs on the entire group, after all elements have
		been selected.
	#END
	Field nextValueTransform:ICombinatorCallback<T[]>
	#rem monkeydoc
		The position in the generator series of the last generated combination. This
		number is 0-indexed, so the first generated combination is combination number
		0, not combination 1.
	#END
	Field currentSeriesPosition:Int
	#rem monkeydoc
		The number of combinations/permutations in the generator's space
	#END
	Field length:Int
	#rem monkeydoc
		The combination group size this generator is configured for.
	#END
	Field groupSize:Int

	Public
	#rem monkeydoc
		The total number of combinations, permutations, or whatever
		it is that this generator generates.
	#END
	Method Length:Int()
		Return length
	End Method
	
	#rem monkeydoc
		Generate and return the next value in this generator's
		series.
	#END
	Method NextValue:T[] ()
		Return
	End Method

	#rem monkeydoc
		Advance through the generator to retrieve the
		value from a specific point in the series.
	#END
	Method GetValueAtIndex:T[] (index:Int)
		Return
	End Method

	#rem monkeydoc
		A callback to be applied to each element as the
		generator selects it for grouping.
	#END
	Method SetNextElementTransform:Void(filter:ICombinatorCallback<T>)
		nextElementTransform = filter
	End Method

	#rem monkeydoc
		A callback to be applied to the entire group after
		it has been selected and arranged.
	#END
	Method SetNextValueTransform:Void(filter:ICombinatorCallback<T[]>)
		nextValueTransform = filter
	End Method

	#rem monkeydoc
		Generate the entire series, and return it as an array.
	#END
	Method ToArray:T[][] ()
		Local results:T[length][]

		For Local seriesIndex:Int = 0 To length - 1
			results[seriesIndex] = NextValue()
		Next
		Return results
	End Method

	#rem monkeydoc
		Generate the entire series, and return it as a Stack.
	#END
	Method ToStack:Stack<T[] > ()
		Local result:Stack<T[] > = New Stack<T[]>(ToArray())

		Return result
	End Method
	
	#rem monkeydoc
		Generate the entire series, and return it as a List.
	#END
	Method ToList:List<T[] > ()
		Local result:List<T[] > = New List<T[]>(ToArray())

		Return result
	End Method
	
	#rem monkeydoc
		Return the last value generated by NextValue(), but
		do not generate a new value, or advance the internal
		pointer.
	#END
	Method GetCurrentValue:T[] ()
		Return currentValue[..]
	End Method
	
	#rem monkeydoc
		Return a numerical representation of where in the 
		series the generator currently is.
	#END
	Method GetCurrentSeriesPosition:Int()
		Return currentSeriesPosition
	End Method
End Class